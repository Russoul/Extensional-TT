let test0 : ℕ
          ≔ Z

assume test2 : ℕ → ℕ

assume test3 : (A : 𝕌) → A

let test31 : Z ≡ Z ∈ ℕ
           ≔ Refl

assume test4 : test0 ≡ Z ∈ ℕ

let id : (A : 𝕌) → A → A
       ≔ A ↦ x ↦ x

assume fun-eta : (A : 𝕌) → (B : A → 𝕌) → (f : (x : A) → B x) → (f ≡ (x ↦ f x) ∈ (x : A) → B x)

assume fun-ext : (A : 𝕌) → (B : A → 𝕌) → (f : (x : A) → B x) → (g : (x : A) → B x) → (p : (x : A) → f x ≡ g x ∈ B x) → f ≡ g ∈ (x : A) → B x

{- let sym : (A : 𝕌) → (a₀ : A) → (a₁ : A) → (a₀ ≡ a₁ ∈ A) → (a₁ ≡ a₀ ∈ A)
        ≔ A ↦ a₀ ↦ a₁ ↦ a ↦ J (x. e. x ≡ a₀ ∈ A) Refl a -}
