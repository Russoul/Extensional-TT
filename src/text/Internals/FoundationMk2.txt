//////////// Type Theory: Extensional MLTT /////////////
We have:
 * Empty type: 𝟘
 * Unit type: 𝟙
 * Dependent product type: Π
 * Dependent sum type: Σ
 * Equality type: (≡) with reflection
 * Indexed quotient-inductive types
 * An infinite hierarchy of universes
 * Universe polymorphism

TODO:
 * inductive types in the universe
 * induction-induction
 * induction-recursion
 * co-inductive types
 * stronger universes


/////////////// Notes /////////////////

* Element relation is defined on types quotiented by the equivalence relation


//////////// Presentation /////////////

//Signature
Σ ::= ε | χ ctx | Γ ⊦ χ type | Σ (Γ ⊦ χ : A) | Σ (Γ ⊦ χ ≔ a : A)

//Signature instance
ē ::= · | ē e | ē _

//Context
Γ, Δ, Ξ ::= ε | Γ (x : A) | χ

//Telescope
Γ, Δ, Ξ ::= ε | (x : A) Γ

//Signature morphism / meta-variable substitution
σ ::= · | σ, t | σ₀ ∘ σ₁ | ↑ | id

//Context morphism / variable substitution
τ ::= · | τ, t | τ₀ ∘ τ₁ | ↑ | id | τ[σ]

//Inductive schema
𝒦 ::= ε | 𝒦, ℓ : 𝒞 | 𝒦, 𝒞⁼ | 𝒦(σ)

//Inductive schema type
𝒜, 𝓑 ::= Π (x : A) 𝓑 | 𝒳(ē) | 𝒜(σ)

//Inductive schema element
𝓜, 𝒩 ::= λx.𝓜 | 𝓜 e | Intro ℓ ē 𝒩̅ | 𝓜(σ) | x

//Inductive schema context
ϴ ::= ε | ϴ 𝒜

//Inductive schema point-constructor
𝒞 ::= (Ξ, ξ.ϴ, ξ.I̅) | 𝒞(σ)

//Inductive schema equality-constructor
𝒞⁼ ::= (Ξ, ξ.ϴ, ξ.I̅, ξ.θ.𝓜, ξ.θ.𝒩) | 𝒞(σ)

//Inductive schema elimination
𝛆 ::= ε | 𝛆, ℓ : ξ.η.ρ.e

l ::= 0 | l ⊔ l | l⁺

//Type
A, B, C, T ::= 𝟘 | 𝟙 | 𝕌ₗ | (x : A) → B | (x : A) → B | (a₀ ≡ a₁ ∈ A) | El(a) | Ind Δ 𝒦 I̅ | A(σ) | χ

//Element
a, b, c, t, f, e ::= 𝟘-elim t
                   | ()
                   | 𝟘
                   | 𝟙
                   | (x : a) → b
                   | (x : a) ⨯ b
                   | (a₀ ≡ a₁ ∈ t)
                   | x ↦ f
                   | (f : (x : A) → B) e
                   | (a, b)
                   | (t : (x : A) ⨯ B).π₁
                   | (t : (x : A) ⨯ B).π₂
                   | Refl
                   | x
                   | χ(ē)
                   | Intro ℓ Δ 𝒦 ē₀ ē₁
                   | Elim Δ 𝒦 δ.h.A I̅ t 𝛆
                   | t(σ)
                   | t[σ]

//Spine
ē, t̄, I̅ ::= · | ē e

//List
ē, t̄, I̅ ::= · | e ē

// data ℕ where
//   Z : ℕ
//   (x : ℕ) ⊦ S(x) : ℕ
//
// data ℤ where
//   (x : ℕ) ⊦ -x : ℤ
//   (x : ℕ) ⊦ +x : ℤ
//   -0 = +0 : ℤ
//
// inc : ℤ → ℤ
// inc (-0) = +1
// inc (-S(x)) = -x
// inc (+x) = +(S(x))
// inc (-0) = inc (+0) : ℤ
//    =          =
//    +1    =    +1
//
// (A : 𝕌) ⊦
//  data List where
//    [] : List
//    (x : A) (xs : List) ⊦ (x :: xs) : List
//
// (A : 𝕌) ⊦
//   data (n : ℕ) ⊦ Vect where
//     [] : Vect 0
//     (n : ℕ) (x : A) (xs : Vect n) ⊦ (x :: xs) : Vect S(n)
//
// (A : 𝕌) (a₀ : A) ⊦
//   data (x : A) ⊦ Eq where
//     Refl : Eq a₀
//
// A : 𝕌
// a₀ : A
// (x : A) (h : Eq A a₀ x) ⊦ C type
// r : C(a₀, Refl)
// a₁ : A
// a : Eq A a₀ a₁
// -------------------------------
// Eq-elim x.h.C r a₁ a : C(a₁, a)
// Eq-elim x.h.C r a₀ Refl = r
//
// e : Eq A a₀ a₁
// -----------------------------------------------
// Eq-elim (x.h. Eq A x a₀) Refl a₁ e : Eq A a₁ a₀
//
//
// (A : 𝕌) (R : A → A → 𝕌) ⊦
//   data A/R where
//     (x : A) ⊦ [x] : A/R
//     (x : A) (y : A) (r : El(R x y)) ⊦ [x] = [y] : A/R
//
// data ℕ₂ where
//  (x : ℕ) ⊦ [x] : ℕ₂
//  (x : ℕ) ⊦ [x] = [x + 2] : ℕ₂
//
// data ℕ∞ where
//   0 : ℕ∞
//   (x : ℕ) ⊦ S(x) : ℕ∞
//   ∞ : ℕ∞
//   S(∞) = ∞ : ℕ∞
//
//(f : X → A) (g : X → B) ⊦
//  data Pushout where
//    (x : A) ⊦ Left(x) : Pushout
//    (y : B) ⊦ Right(y) : Pushout
//    (x : X) ⊦ Left (f x) = Right (g x) : Pushout
//
// Induction-induction required below
//
// data (n : ℕ) ⊦ Even where
//    ZeroEven : Even 0
//    (o : Odd n) ⊦ Next : Even S(n)
//
// data (n : ℕ) ⊦ Odd where
//    OneOdd : Odd 1
//    (e : Even n) ⊦ Next : Odd S(n)
//
// (A : 𝕌) ⊦
//    data Poset where
//      (x : A) ⊦ Inj(x) : Poset
//      (x y : Poset) (x ≤ y) (y ≤ x) ⊦ x = y : Poset
//    data (x : Poset) (y : Poset) ⊦ x ≤ y where
//      Refl : x ≤ x
//      (x y z : Poset) (p : x ≤ y) (q : y ≤ z) ⊦ p ∙ q : x ≤ z
//


/////// Judgement forms /////////

Σ sig

Σ₀ sig
Σ₁ sig
-----------
σ : Σ₀ ⇒ Σ₁

ē : Σ

ℒ lctx

ℒ ⊦ l lvl

ℒ ⊦ l₀ = l₁ lvl

Σ ℒ ⊦ Γ ctx

Σ ℒ ⊦ Γ ctx
-----------------
Σ ℒ Γ ⊦ Δ tel

Σ ℒ Γ ⊦ Δ₀ tel
Σ ℒ Γ ⊦ Δ₁ tel
-------------------
Σ ℒ Γ ⊦ Δ₀ = Δ₁ tel

Σ ℒ ⊦ Γ ctx
--------------
Σ Γ ⊦ A type

Σ ℒ Γ ⊦ A₀ type
Σ ℒ Γ ⊦ A₁ type
--------------------
Σ ℒ Γ ⊦ A₀ = A₁ type

Σ ℒ Γ ⊦ A type
--------------
Σ ℒ Γ ⊦ a : A

Σ ℒ Γ ⊦ Δ tel
-------------
Σ ℒ Γ ⊦ ē : Δ

Σ ℒ Γ ⊦ a₀ : A
Σ ℒ Γ ⊦ a₁ : A
-------------------
Σ ℒ Γ ⊦ a₀ = a₁ : A

Σ ℒ ⊦ Γ ctx
Σ ℒ ⊦ Δ ctx
-------------
Σ ℒ ⊦ σ : Γ ⇒ Δ

Σ ℒ ⊦ σ : Γ ⇒ Δ
Σ ℒ ⊦ τ : Γ ⇒ Δ
-----------------
Σ ⊦ σ = τ : Γ ⇒ Δ

Σ | Γ ⊦ Δ tel
-------------
Σ | Γ ⊦ Δ ᐅ 𝒦

Σ | Γ ⊦ Δ ᐅ 𝒦
---------------
Σ | Γ ⊦ Δ 𝒦 ᐅ 𝒞

Σ | Γ ⊦ Δ ᐅ 𝒦
----------------
Σ | Γ ⊦ Δ 𝒦 ᐅ 𝒞⁼

Σ | Γ ⊦ Δ tel
-------------------
Σ | Γ ⊦ Δ ᐅ 𝒜 atype

Σ | Γ ⊦ Δ tel
------------------
Σ | Γ ⊦ Δ ᐅ ϴ actx

Σ | Γ ⊦ Δ ᐅ 𝒜
---------------------
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒜

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ ϴ' actx
----------------------
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜̅ : ϴ'

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
--------------------------------------
Σ | Γ ⊦ Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------
Σ | Γ ⊦ Δ ᐅ 𝛆 : 𝒦 → δ.h.C
       Defined as (Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C) and |𝛆| = |𝒦|

///////// Inference rules (sig) //////////

ε sig

Σ sig
Σ | Γ ⊦ A type
-----------------
Σ (Γ ⊦ x : A) sig

Σ sig
Σ | Γ ⊦ a : A
---------------------
Σ (Γ ⊦ x ≔ a : A) sig

///////// Inference rules (sig substitution) //////////

///////// Inference rules (sig instance) //////////

· : ε

ē : Σ
ε | Γ(ē) ⊦ e : A(ē)
-------------------
ē e : Σ (Γ ⊦ χ : A)

ē : Σ
-----------------------
ē _ : Σ (Γ ⊦ χ ≔ a : A)

///////// Inference rules (lvl) //////////


ε lctx

ℒ lctx
--------
ℒ x lctx

ℒ ⊦ 0 : lvl

ℒ ⊦ l : lvl
---------------
ℒ ⊦ suc l : lvl

ℒ ⊦ l₀ : lvl
ℒ ⊦ l₁ : lvl
-----------------
ℒ ⊦ l₀ ⊔ l₁ : lvl

ℒ₀ x ℒ₁ ⊦ x : lvl

ℒ ⊦ l ⊔ (l⁺⁺⁺...⁺) = (l⁺⁺⁺...⁺) lvl

ℒ ⊦ l ⊔ l = l lvl

ℒ ⊦ (l₀ ⊔ l₁) ⊔ l₂ = l₀ ⊔ (l₁ ⊔ l₂) lvl

ℒ ⊦ l₀ ⊔ l₁ = l₁ ⊔ l₀ lvl

ℒ ⊦ (l₀ ⊔ l₁)⁺ = l₀⁺ ⊔ l₁⁺ lvl

///////// Inference rules (ctx) //////////

Σ ⊦ ε ctx

Σ ⊦ Γ ctx
Σ | Γ ⊦ A type
-----------------
Σ ⊦ Γ (x : A) ctx

///////// Inference rules (tel) //////////

Σ | Γ ⊦ ctx
-------------
Σ | Γ ⊦ ε tel

Σ | Γ A ⊦ Δ tel
---------------------
Σ | Γ ⊦ (x : A) Δ tel

///////// Inference rules (type) //////////

Σ | Γ ⊦ 𝟘 type

Σ | Γ ⊦ 𝟙 type

Σ | Γ ⊦ 𝕌 type

Σ | Γ ⊦ a : 𝕌
------------------
Σ | Γ ⊦ El(a) type

Σ | Γ ⊦ A type
Σ | Γ (x : A) ⊦ B type
------------------------
Σ | Γ ⊦ (x : A) → B type

Σ | Γ ⊦ A type
Σ | Γ (x : A) ⊦ B type
------------------------
Σ | Γ ⊦ (x : A) ⨯ B type

Σ | Γ ⊦ a₀ : A
Σ | Γ ⊦ a₁ : A
----------------------
Σ | Γ ⊦ (a₀ ≡ a₁ ∈ A) type

Σ | Γ ⊦ A type
Σ | σ : Δ ⇒ Γ
-----------------
Σ | Δ ⊦ A(σ) type

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ I̅ : Δ
----------------------
Σ | Γ ⊦ Ind Δ 𝒦 I̅ type

/////////// Inference rules (type equality) ////////////

Σ | Γ ⊦ 𝟘 = 𝟘 type

Σ | Γ ⊦ 𝟙 = 𝟙 type

Σ | Γ ⊦ 𝕌 = 𝕌 type

Σ | Γ ⊦ El(𝟘) = 𝟘 type

Σ | Γ ⊦ El(𝟙) = 𝟙 type

Σ | Γ ⊦ a : 𝕌
Σ | Γ (x : El(a)) ⊦ b : 𝕌
--------------------------------------------------
Σ | Γ ⊦ El((x : a) → b) = (x : El(a)) → El(b) type

Σ | Γ ⊦ a : 𝕌
Σ | Γ (x : El(a)) ⊦ b : 𝕌
--------------------------------------------------
Σ | Γ ⊦ El((x : a) ⨯ b) = (x : El(a)) ⨯ El(b) type

Σ | Γ ⊦ t : 𝕌
Σ | Γ ⊦ a₀ : El(t)
Σ | Γ ⊦ a₁ : El(t)
------------------------------------------------
Σ | Γ ⊦ El(a₀ ≡ a₁ ∈ t) = (a₀ ≡ a₁ ∈ El(t)) type

Σ | Γ ⊦ A₀ = A₁ type
Σ | Γ (x : A₀) ⊦ B₀ = B₁ type
------------------------------------------
Σ | Γ ⊦ (x : A₀) → B₀ = (x : A₁) → B₁ type

Σ | Γ ⊦ A₀ = A₁ type
Σ | Γ (x : A₀) ⊦ B₀ = B₁ type
------------------------------------------
Σ | Γ ⊦ (x : A₀) ⨯ B₀ = (x : A₁) ⨯ B₁ type

Σ | Γ ⊦ A = B type
Σ | Γ ⊦ a₀ = b₀ : A
Σ | Γ ⊦ a₁ = b₁ : A
------------------------------------------
Σ | Γ ⊦ (a₀ ≡ a₁ ∈ A) = (b₀ ≡ b₁ ∈ B) type

Σ ⊦ σ : Δ ⇒ Γ
---------------------
Σ ⊦ Δ ⊦ 𝟘(σ) = 𝟘 type

Σ ⊦ σ : Δ ⇒ Γ
---------------------
Σ | Δ ⊦ 𝟙(σ) = 𝟙 type

Σ ⊦ σ : Δ ⇒ Γ
--------------------------------------------------
Σ | Δ ⊦ ((x : A) → B)(σ) = (x : A(σ)) → B(σ⁺) type

Σ ⊦ σ : Δ ⇒ Γ
--------------------------------------------------
Σ | Δ ⊦ ((x : A) ⨯ B)(σ) = (x : A(σ)) ⨯ B(σ⁺) type

Σ ⊦ σ : Δ ⇒ Γ
------------------------------------------------------
Σ | Δ ⊦ (a₀ ≡ a₁ ∈ A)(σ) = (a₀(σ) ≡ a₁(σ) ∈ A(σ)) type

Σ ⊦ σ : Δ ⇒ Γ
Σ ⊦ τ : Ξ ⇒ Δ
-------------------------------
Σ | Ξ ⊦ A(σ)(τ) = A(σ ∘ τ) type

///////// Inference rules (elem) //////////

Σ | Γ ⊦ t : 𝟘
--------------------
Σ | Γ ⊦ 𝟘-elim t : A

Σ | Γ ⊦ () : 𝟙

Σ | Γ ⊦ 𝟘 : 𝕌

Σ | Γ ⊦ 𝟙 : 𝕌

Σ | Γ ⊦ a : 𝕌
Σ | Γ (x : El(a)) ⊦ b : 𝕌
-------------------------
Σ | Γ ⊦ (x : a) → b : 𝕌

Σ | Γ ⊦ a : 𝕌
Σ | Γ (x : El(a)) ⊦ b : 𝕌
---------------------
Σ | Γ ⊦ (x : a) ⨯ b : 𝕌

Σ | Γ ⊦ t : 𝕌
Σ | Γ ⊦ a₀ : El(t)
Σ | Γ ⊦ a₁ : El(t)
-------------------------
Σ | Γ ⊦ (a₀ ≡ a₁ ∈ t) : 𝕌

Σ | Γ (x : A) ⊦ f : B
---------------------------
Σ | Γ ⊦ x ↦ f : (x : A) → B

Σ | Γ ⊦ f : (x : A) → B
Σ | Γ ⊦ e : A
--------------------------------------
Σ | Γ ⊦ (f : (x : A) → B) e : B(e/x)

Σ | Γ (x : A) ⊦ B type
Σ | Γ ⊦ a : A
Σ | Γ ⊦ b : B(a/x)
----------------------------
Σ | Γ ⊦ (a, b) : (x : A) ⨯ B

Σ | Γ ⊦ t : (x : A) ⨯ B
--------------------------------
Σ | Γ ⊦ (t : (x : A) ⨯ B).π₁ : A

Σ | Γ ⊦ t : Σ A B
------------------------
Σ | Γ ⊦ t.π₂ : B(t.π₁/x)

Σ | Γ ⊦ a₀ : A
Σ | Γ ⊦ a₁ : A
-----------------------
Σ | Γ ⊦ a₀ ≡(A) a₁ type

Σ | Γ ⊦ a : A
--------------------------
Σ | Γ ⊦ Refl : (a ≡ a ∈ A)

a₀ : A
(x : A) (p : x ≡ a₀ ∈ A) ⊦ B type
r : B(a₀, Refl)
a₁ : A
p : a₀ ≡ a₁ ∈ A
------------------------------------
Σ | Γ ⊦ J a₀ x.p.B r a₁ p : B(a₁, p)
        J a₀ x.p.B r a₀ Refl = r : B(a₀, Refl)

a₀ : A
(x : A) (p : x ≡ a₀ ∈ A) ⊦ B type
(x : A) (p : x ≡ a₀ ∈ A) ⊦ f : B
a₁ : A
p : a₀ ≡ a₁ ∈ A
------------------------------------------------- //this rule (η-rule) makes type-theory extesional
f(a₁, p) = J a₀ x.p.B f(a₀, Refl) a₁ p : B(a₁, p)

//From this rule we can derive UIP and equality reflection

Σ | Γ (x : A) ⊦ x : A(↑)

Σ₀ (Δ ⊦ χ : A) Σ₁ | Γ ⊦ ē : Δ
-----------------------------------
Σ₀ (Δ ⊦ χ : A) Σ₁ | Γ ⊦ χ(ē) : A(ē)

Γ ⊦ t : A
σ : Δ ⇒ Γ
---------------
Δ ⊦ t(σ) : A(σ)

Σ₁ | Γ ⊦ t : A
σ : Σ₀ ⇒ Σ₁
-----------------------
Σ₀ | Γ[σ] ⊦ t[σ] : A[σ]

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ 𝒦[ℓ] = (Ξ, ϴ, γ.I̅)
Σ | Γ ⊦ ē₀ : Ξ
Σ | Γ ⊦ ē₁ : ⦃ϴ⦄(δ. Ind Δ δ)
-------------------------------------------
Σ | Γ ⊦ Intro ℓ Δ 𝒦 ē₀ ē₁ : Ind Δ 𝒦 I̅(ē₀/γ)

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Σ | Γ ⊦ I̅ : Δ
Σ | Γ ⊦ t : Ind Δ 𝒦 I̅
Σ | Γ ⊦ Δ ᐅ 𝛆 : 𝒦 → δ.h.C
------------------------------------------
Σ | Γ ⊦ Elim Δ 𝒦 δ.h.C I̅ t 𝛆 : C(I̅/δ, t/h)

///////// Inference rules (elem equality) //////////

Σ | Γ ⊦ t : 𝟙
------------------
Σ | Γ ⊦ t = () : 𝟙

Σ | Γ (x : A) ⊦ f : B
Σ | Γ ⊦ e : A
---------------------------------------------------
Σ | Γ ⊦ ((x ↦ f) : (x : A) → B) e = f(e/x) : B(e/x)

Σ | Γ ⊦ f : (x : A) → B
---------------------------------------------
Σ | Γ ⊦ x ↦ (f : (x : A) → B) x = f : (x : A) → B

Σ | Γ (x : A) ⊦ B type
Σ | Γ ⊦ a : A
Σ | Γ ⊦ b : B(a/x)
-----------------------------------------
Σ | Γ ⊦ ((a, b) : (x : A) ⨯ B).π₁ = a : A

Σ | Γ (x : A) ⊦ B type
Σ | Γ ⊦ a : A
Σ | Γ ⊦ b : B(id, a)
--------------------------------
Σ | Γ ⊦ (a, b).π₂ = b : B(id, a)

Σ | Γ ⊦ t : (x : A) ⨯ B
----------------------------------------------------------------------
Σ | Γ ⊦ ((t : (x : A) ⨯ B).π₁, (t : (x : A) ⨯ B).π₂) = t : (x : A) ⨯ B

Σ | Γ ⊦ A ctx
Σ ⊦ σ : Δ ⇒ Γ
Σ | Δ ⊦ t : A(σ)
---------------------------
Σ | Δ ⊦ x₀(σ, t) = t : A(σ)

Σ | Γ ⊦ xᵢ : B
-----------------------------
Σ | Γ A ⊦ xᵢ(↑) = xᵢ₊₁ : B(↑)

Σ ⊦ σ : Δ ⇒ Γ
Σ ⊦ τ : Ξ ⇒ Δ
Σ | Γ ⊦ A type
---------------------------------
Σ | Ξ ⊦ t(σ)(τ) = t(σ ∘ τ) : A(σ ∘ τ)

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅, ξ.θ.𝓜₀, ξ.θ.𝓜₁)
Σ | Γ ⊦ ē : Ξ
Σ | Γ ⊦ t̄ : Δ 𝒦 ᐅ ⦃ϴ(ē)⦄
--------------------------------------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦃θ.𝓜₀(ē)⦄(t̄) = Δ 𝒦 ᐅ ⦃θ.𝓜₁(ē)⦄(t̄) : Ind Δ 𝒦 I̅(ē)

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Σ | Γ ⊦ I̅ : Δ
Σ | Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅₀)
Σ | Γ ⊦ ē : Ξ
Σ | Γ ⊦ t̄ : Δ 𝒦 ᐅ ⦃ϴ(ē)⦄
//By typing: Γ ⊦ I̅₀(ē) = I̅ : Δ
//By typing: Γ (ξ : Ξ) (η : Δ 𝒦 ᐅ ⦃ϴ⦄) (ρ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, η)) ⊦ 𝛆[ℓ] : C(I̅₀, Intro ℓ Δ 𝒦 ξ η)
--------------------------------------------------------------------------------------------------------
Σ | Γ ⊦ Elim Δ 𝒦 δ.h.C I̅ (Intro ℓ Δ 𝒦 ē t̄) 𝛆 = 𝛆[ℓ](ē, t̄, Δ 𝒦 ᐅ act(δ.h.C, ϴ(ē), t̄)) : C(I̅, Intro ℓ Δ 𝒦 ē t̄)

///////// Inference rules (substitution) //////////

Σ ⊦ Γ ctx
-------------
Σ ⊦ · : Γ ⇒ ε

Σ ⊦ Γ ctx
--------------
Σ ⊦ id : Γ ⇒ Γ

Σ ⊦ Γ (x : A) ctx
---------------------
Σ ⊦ ↑ : Γ (x : A) ⇒ Γ

Σ ⊦ σ : Δ ⇒ Γ
Σ ⊦ τ : Ξ ⇒ Δ
-----------------
Σ ⊦ σ ∘ τ : Ξ ⇒ Γ

Σ ⊦ σ : Δ ⇒ Γ
Σ ⊦ Γ ⊦ A type
Σ ⊦ Δ ⊦ t : A(σ)
------------------
Σ ⊦ σ, t : Δ ⇒ Γ A

///////// Inference rules (substitution equality) //////////

Σ ⊦ Γ ctx
Σ ⊦ σ : Γ ⇒ ε
-----------------
Σ ⊦ σ = · : Γ ⇒ ε

Σ ⊦ σ : Γ ⇒ Δ
------------------
Σ ⊦ σ ∘ id = σ : Γ ⇒ Δ

Σ ⊦ σ : Γ ⇒ Δ
------------------
Σ ⊦ id ∘ σ = σ : Γ ⇒ Δ

Σ ⊦ σ₁₀ : Γ₁ ⇒ Γ₀
Σ ⊦ σ₂₁ : Γ₂ ⇒ Γ₁
Σ ⊦ σ₃₂ : Γ₃ ⇒ Γ₂
-----------------------------------------------
Σ ⊦ σ₁₀ ∘ (σ₂₁ ∘ σ₃₂) = (σ₁₀ ∘ σ₂₁) ∘ σ₃₂ : Γ₃ ⇒ Γ₀

Σ ⊦ σ : Δ ⇒ Γ
Σ ⊦ Γ ⊦ A type
Σ ⊦ Δ ⊦ t : A(σ)
----------------------
Σ ⊦ ↑ ∘ (σ, t) = σ : Δ ⇒ Γ

Σ ⊦ τ : Γ₀ ⇒ Γ₁
Σ ⊦ σ : Γ₁ ⇒ Γ₂
Σ ⊦ Γ₂ ⊦ A type
Σ ⊦ Γ₁ ⊦ t : A(σ)
--------------------------------------
Σ ⊦ (σ, t) ∘ τ = (σ ∘ τ, t(τ)) : Γ₀ ⇒ Γ₂ A

///////// Inference rules (inductive schema) //////////

Σ | Γ ⊦ Δ ᐅ ε

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ 𝒦 ᐅ 𝒞
------------------
Σ | Γ ⊦ Δ ᐅ (𝒦, ℓ : 𝒞)

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ 𝒦 ᐅ 𝒞⁼
------------------
Σ | Γ ⊦ Δ ᐅ (𝒦, ℓ : 𝒞⁼)

///////// Inference rules (inductive point-constructor) //////////

Σ | Γ ⊦ Ξ tel
Σ | Γ Ξ ⊦ Δ ᐅ ϴ
Σ | Γ Ξ ⊦ ē : Δ
-------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ (Ξ, ϴ, ē)

///////// Inference rules (inductive equality-constructor) //////////

Σ | Γ ⊦ Ξ tel
Σ | Γ Ξ ⊦ Δ ᐅ ϴ actx
Σ | Γ Ξ ⊦ ē : Δ
Σ | Γ Ξ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒳(ē)
Σ | Γ Ξ ϴ ⊦ Δ 𝒦 ᐅ 𝒩 : 𝒳(ē)
------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ (Ξ, ϴ, ē, 𝓜, 𝒩)

///////// Inference rules (actx) //////////

Σ | Γ ⊦ Δ ᐅ ε actx

Σ | Γ ⊦ Δ ᐅ ϴ actx
Σ | Γ ⊦ Δ ᐅ 𝒜 atype
------------------
Σ | Γ ⊦ Δ ᐅ ϴ 𝒜 actx

///////// Inference rules (atype) //////////

Σ | Γ ⊦ A type
Σ | Γ A ⊦ Δ ᐅ 𝓑 atype
---------------------
Σ | Γ ⊦ Δ ᐅ Π A 𝓑 atype

Σ | Γ ⊦ ē : Δ
---------------------
Σ | Γ ⊦ Δ ᐅ 𝒳(ē) atype

///////// Inference rules (aelem) //////////


Σ | Γ A ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝓑
----------------------
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ λ𝓜 : Π A 𝓑

Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : Π A 𝓑
Σ | Γ ⊦ e : A
--------------------------
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 e : 𝓑(id, e)

Σ | Γ ⊦ 𝒦[ℓ] = (Ξ, ϴ', I̅)
Σ | Γ ⊦ ē : Ξ
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝒩̅ : ϴ'
------------------------------------
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ Intro ℓ ē 𝒩̅ : 𝒳 I̅(id, ē)

Σ | Γ ϴ 𝒜 ⊦ Δ 𝒦 ᐅ x₀ : 𝒜

Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ xᵢ : 𝓑
----------------------
Σ | Γ ϴ 𝒜 ⊦ Δ 𝒦 ᐅ xᵢ₊₁ : 𝓑

///////// Inference rules (elimination) //////////

Σ | Γ ⊦ Δ ᐅ ε : 𝒦 ⇀ δ.h.C

Σ | Γ ⊦ Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C
Σ | Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅)
Σ | Γ (ξ : Ξ) (η : Δ 𝒦 ᐅ ⦃ϴ⦄) (ρ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, η)) ⊦ e : C(I̅/δ, Intro ℓ Δ 𝒦 ξ η/h)
-----------------------------------------------------------------------------------
Σ | Γ ⊦ Δ ᐅ 𝛆, ℓ : ξ.η.ρ.e : 𝒦 ⇀ δ.h.C

Σ | Γ ⊦ Δ ᐅ 𝛆 : 𝒦 ⇀ δ.h.C
Σ | Γ ⊦ 𝒦[ℓ] = (Ξ, ξ.ϴ, ξ.I̅, ξ.θ.𝓜₀, ξ.θ.𝓜₁)
Σ | Γ (ξ : Ξ) (η : Δ 𝒦 ᐅ ⦃ϴ⦄) (ρ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, η)) ⊦
   (Δ 𝒦 ᐅ ⦇θ.𝓜₀⦈(δ.h.C, η, ρ, 𝛆)) = (Δ 𝒦 ᐅ ⦇θ.𝓜₁⦈(δ.h.C, η, ρ, 𝛆)) : C(I̅, Δ 𝒦 ᐅ ⦃θ.𝓜₀⦄(η))
//Σ | Γ Ξ ϴ ⊦ Δ 𝒦 ᐅ 𝓜₀ : 𝒳(I̅)
//Σ | Δ 𝒦 ᐅ ⦇𝒳(I̅)⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜₀⦄(η))
//     =
//    C(I̅, Δ 𝒦 ᐅ ⦃θ.𝓜₀⦄(η))
-----------------------------------------------------------------------
Σ | Γ ⊦ Δ ᐅ 𝛆, ℓ : ξ.η.ρ.e : 𝒦 ⇀ δ.h.C


///////// Interpretations //////////

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ 𝒜 atype
-------------------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦃𝒜⦄ type
        Δ 𝒦 ᐅ ⦃Π (x : A) 𝓑⦄ = Π (x : A) (Δ 𝒦 ᐅ ⦃𝓑⦄)
        Δ 𝒦 ᐅ ⦃𝒳(I̅)⦄ = Ind Δ 𝒦 I̅

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ ϴ ctx
-----------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦃ϴ⦄ tel
        Δ 𝒦 ᐅ ⦃ε⦄ = ε
        Δ 𝒦 ᐅ ⦃ϴ 𝒜⦄ = (Δ 𝒦 ᐅ ⦃ϴ⦄) (Δ 𝒦 ᐅ ⦃𝒜⦄)

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ 𝒜 atype
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒜
Σ | Γ ⊦ ē : Δ 𝒦 ᐅ ⦃ϴ⦄
------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē) : Δ 𝒦 ᐅ ⦃𝒜⦄
        Δ 𝒦 ᐅ ⦃θ. λx.f⦄(ē) = λx. Δ 𝒦 ᐅ ⦃θ.f⦄(ē) : Π (x : A) (Δ 𝒦 ᐅ ⦃𝓑⦄)
        Δ 𝒦 ᐅ ⦃θ. 𝓜 e⦄(ē) = (Δ 𝒦 ᐅ ⦃θ. 𝓜⦄(ē)) e : 𝓑
        //𝒦[ℓ] = (Ξ, ϴ', ξ.I̅)
        Δ 𝒦 ᐅ ⦃θ. Intro ℓ ē₀ 𝒩̅⦄(ē) = Intro ℓ Δ 𝒦 ē₀ (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē)) : Ind Δ 𝒦 I̅(ē₀/ξ)
        //ϴ = ϴ₀ 𝒜 ϴ₁
        Δ 𝒦 ᐅ ⦃θ. xᵢ⦄(ē₀, eᵢ, ē₁) = eᵢ : Δ 𝒦 ᐅ ⦃𝒜⦄

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ ϴ' actx
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝒩̅ : ϴ'
Σ | Γ ⊦ ē : Δ 𝒦 ᐅ ⦃ϴ⦄
-------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē) : Δ 𝒦 ᐅ ⦃ϴ'⦄
        Δ 𝒦 ᐅ ⦃θ.·⦄(ē) : ε
        Δ 𝒦 ᐅ ⦃θ.𝒩̅ 𝒩⦄(ē) = (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē)) (Δ 𝒦 ᐅ ⦃θ.𝒩⦄(ē)) : (Δ 𝒦 ᐅ ⦃ϴ'⦄) (Δ 𝒦 ᐅ ⦃𝒜⦄)


Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ 𝒜 atype
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Σ | Γ ⊦ e : Δ 𝒦 ᐅ ⦃𝒜⦄
----------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e) type
        Δ 𝒦 ᐅ ⦇𝒳(ē)⦈(δ.h.C, e) = C(ē/δ, e)
        Δ 𝒦 ᐅ ⦇Π (x : A) 𝓑⦈(δ.h.C, e) = Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, e x))

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ ϴ actx
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
Σ | Γ ⊦ ē : Δ 𝒦 ᐅ ⦃ϴ⦄
----------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē) tel
        Δ 𝒦 ᐅ ⦇ε⦈(δ.h.C, ē) = ε
        Δ 𝒦 ᐅ ⦇ϴ 𝒜⦈(δ.h.C, (ē, e)) = (Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē)) (Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e))

Σ | Γ ⊦ Δ ᐅ 𝒜 atype
Σ | Γ ⊦ Δ ᐅ ϴ actx
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜 : 𝒜
Σ | Γ ⊦ ē₀ : Δ 𝒦 ᐅ ⦃ϴ⦄
Σ | Γ ⊦ ē₁ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē₀)
Σ | Γ ⊦ 𝛆 : 𝒦 → δ.h.C
-------------------------------------------------------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆) : Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀))
        //𝒜 = Π (x : A) 𝓑
        Δ 𝒦 ᐅ ⦇θ.λx.f⦈(δ.h.C, ē₀, ē₁, 𝛆) = λx. Δ 𝒦 ᐅ ⦇θ.f⦈(δ.h.C, e₀, e₁, 𝛆) : Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.f⦄(ē₀)))
        //𝓜 : Π (x : A) 𝓑
        //We have: 𝓑(a/x) = 𝒜
        //Expected type: Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜 a⦄(ē₀))
        //                   =
        //               Δ 𝒦 ᐅ ⦇𝓑(a/x)⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜 a⦄(ē₀))
        //                   =
        //               Δ 𝒦 ᐅ ⦇𝓑(a/x)⦈(δ.h.C, (Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)) a)
        //⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆) : Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, (Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)) x))
        //Got type: Δ 𝒦 ᐅ ⦇𝓑(a/x)⦈(δ.h.C, (Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)) a)
        Δ 𝒦 ᐅ ⦇θ.𝓜 a⦈(δ.h.C, ē₀, ē₁, 𝛆) = ⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆) a

        //𝒦[ℓ] = (Ξ, ϴ', ξ.I̅')
        //ē : Ξ
        //𝒩̅ : ϴ'
        //𝛆[ℓ] = γ.η.ρ.e :
        //Expected type: ⦇𝒳(I̅'(ē/ξ))⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.Intro ℓ ē 𝒩̅⦄(ē₀))
                            =
                         ⦇𝒳(I̅'(ē/ξ))⦈(δ.h.C, Intro ℓ Δ 𝒦 ē (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē₀)))
                            =
                         C(I̅'(ē/ξ), Intro ℓ Δ 𝒦 ē (Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē₀)))
        Δ 𝒦 ᐅ ⦇θ.Intro ℓ ē 𝒩̅⦈(δ.h.C, ē₀, ē₁, 𝛆)
               =
             e(ē, Δ 𝒦 ᐅ ⦃𝒩̅⦄(ē₀) : Δ 𝒦 ᐅ ⦃ϴ'⦄, ⦇θ.𝒩̅⦈(δ.h.C, ē₀, ē₁, 𝛆) : Δ 𝒦 ᐅ ⦇ϴ'⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝒩̅⦄(ē₀)))

        //ē₀ = ē₀₀ e₀ᵢ ē₀₁
        //ē₁ = ē₁₀ e₁ᵢ ē₁₁
        //e₁ᵢ : Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e₀ᵢ)
        //ϴ = ϴ₀ 𝒜 ϴ₁
        //Expected type:
        //Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, e₀ᵢ)
        Δ 𝒦 ᐅ ⦇θ.xᵢ⦈(δ.h.C, ē₀, ē₁, 𝛆) = e₁ᵢ


Σ | Γ ⊦ Δ ᐅ ϴ' actx
Σ | Γ ⊦ Δ ᐅ ϴ actx
Σ | Γ ϴ ⊦ Δ 𝒦 ᐅ 𝓜̅ : ϴ'
Σ | Γ ⊦ ē₀ : Δ 𝒦 ᐅ ⦃ϴ⦄
Σ | Γ ⊦ ē₁ : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, ē₀)
Σ | Γ ⊦ 𝛆 : 𝒦 → δ.h.C
-------------------------------------------------------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ ⦇θ.𝓜̅⦈(δ.h.C, ē₀, ē₁, 𝛆) : Δ 𝒦 ᐅ ⦇ϴ'⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜̅⦄(ē₀))
        Δ 𝒦 ᐅ ⦇θ.·⦈(δ.h.C, ē₀, ē₁, 𝛆) = · : ε
        Δ 𝒦 ᐅ ⦇θ.𝓜̅ 𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆)
          =
        (⦇θ.𝓜̅⦈(δ.h.C, ē₀, ē₁, 𝛆)) (⦇θ.𝓜⦈(δ.h.C, ē₀, ē₁, 𝛆)) : (Δ 𝒦 ᐅ ⦇ϴ'⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜̅⦄(ē₀))) (Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, Δ 𝒦 ᐅ ⦃θ.𝓜⦄(ē₀)))

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ 𝒜 actx
Σ | Γ ⊦ t : Δ 𝒦 ᐅ ⦃𝒜⦄
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ act(δ.h.C, 𝒜, t) : Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, t)
        Δ 𝒦 ᐅ act(δ.h.C, Π (x : A) 𝓑, t) = λx. Δ 𝒦 ᐅ act(𝓑, t x) : Π (x : A) (Δ 𝒦 ᐅ ⦇𝓑⦈(δ.h.C, t x))
        Δ 𝒦 ᐅ act(δ.h.C, 𝒳(I̅), t) = Elim Δ 𝒦 δ.h.C I̅ t : C(I̅, t)

Σ | Γ ⊦ Δ ᐅ 𝒦
Σ | Γ ⊦ Δ ᐅ ϴ actx
Σ | Γ ⊦ t̄ : Δ 𝒦 ᐅ ⦃ϴ⦄
Σ | Γ (δ : Δ) (h : Ind Δ 𝒦 δ) ⊦ C type
----------------------------------------------------
Σ | Γ ⊦ Δ 𝒦 ᐅ act(δ.h.C, ϴ, t̄) : Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, t̄)
        Δ 𝒦 ᐅ act(δ.h.C, ε, ·) = · : ε
        Δ 𝒦 ᐅ act(δ.h.C, ϴ 𝒜, t̄ t) = (Δ 𝒦 ᐅ act(δ.h.C, ϴ, t̄)) (Δ 𝒦 ᐅ act(δ.h.C, 𝒜, t)) : (Δ 𝒦 ᐅ ⦇ϴ⦈(δ.h.C, t̄)) (Δ 𝒦 ᐅ ⦇𝒜⦈(δ.h.C, t))

