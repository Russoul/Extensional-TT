//////////// Preface ////////////

This file contains an elaboration specification for Nova's surface language.

/////////////////////////////////

TODO: Bring the file up-to-date


α, β, γ ::= α ; α ... ; α | id | reduce ρ | exact t | * α * α ... * α

//Type elaboration judgement
Σ Ω Γ ⊦ ⟦A⟧ ⇝ A' type

//Element elaboration judgement
Σ Ω Γ ⊦ ⟦t⟧ ⇝ t' : A

//Element elimination elaboration judgement
Σ Ω Γ ⊦ (t : T) ⟦t⟧ ⇝ t' : A

//Tactic elaboration judgement
Σ Ω ⊦ ⟦α⟧ ⇝ α' : (Γ ⊦ A) ⇒ (Δ ⊦ B)

-----------------------
Σ Ω ⊦ (Γ ⊦ ⟦ℕ⟧ ⇝ ℕ : 𝕌)


Σ Ω ⊦ (Γ ⊦ ⟦A⟧ ⇝ A' : 𝕌)
      (Γ (x : A') ⊦ ⟦B⟧ ⇝ B' : 𝕌)
-----------------------------------------
Σ Ω ⊦ (Γ ⊦ ⟦(x : A) → B⟧ ⇝ (x : A') → B' : 𝕌)


Σ Ω ⊦ (Γ (x : A) ⊦ ⟦f⟧ ⇝ f' : B)
--------------------------------------
Σ Ω ⊦ (Γ ⊦ ⟦x ↦ f⟧ ⇝ x ↦ f' : (x : A) → B)


Σ Ω ⊦ (Γ₀ (x : C) Γ₁ ⊦ (x : C) ⟦ē⟧ ⇝ t' : A)
----------------------------------------
Σ Ω ⊦ (Γ₀ (x : C) Γ₁ ⊦ ⟦x ē⟧ ⇝ t' : A)


Σ₀ (ε ⊦ x : C) Σ₁ Ω ⊦ (Γ ⊦ (x : C) ⟦ē⟧ ⇝ t' : A)
--------------------------------------------
Σ₀ (ε ⊦ x : C) Σ₁ Ω ⊦ (Γ ⊦ ⟦x ē⟧ ⇝ t' : A)


      (Γ (x : ℕ) ⊦ ⟦A⟧ ⇝ A' type)
      (Γ ⊦ ⟦z⟧ ⇝ z' : A'(0/x))
Σ Ω ⊦ (Γ (y : ℕ) (h : A') ⊦ ⟦s⟧ ⇝ s' : A'(S x/x))
      (Γ ⊦ ⟦t⟧ ⇝ t' : ℕ)
      (Γ ⊦ (ℕ-elim (x. A') z' (y. h. s') t' : A'(t'/x)) ⟦ē⟧ ⇝ p' : A)
--------------------------------------------------------------------------
Σ Ω ⊦ (Γ ⊦ ⟦ℕ-elim (x. A) z (y. h. s) t ē⟧ ⇝ p' : A)


      (Γ ⊦ ⟦e⟧ ⇝ e' : (a₀ ≡ a₁ ∈ A))
Σ Ω ⊦ (Γ (x : A) (h : a₀ ≡ x ∈ A) ⊦ ⟦B⟧ ⇝ B' type)
      (Γ ⊦ ⟦r⟧ ⇝ r' : B'(a₀/x, */h))
      (Γ ⊦ (r : B'(a₁/x, e'/h)) ⟦ē⟧ ⇝ p' : C)
--------------------------------------------------------------
Σ Ω ⊦ (Γ ⊦ ⟦J (x. h. B) r e ē⟧ ⇝ p' : C)


-----------------------------------------------
Σ Ω ⊦ (Γ ⊦ ⟦?x⟧ ⇝ ?x : C) Ξ₂


Σ Ω ⊦ Ξ₀ (Γ ⊦ ? : C) (Γ ⊦ p' ≔ ? : C) Ξ₁ Ξ₂
-----------------------------------------------
Σ Ω ⊦ Ξ₀ (Γ ⊦ p' : C) Ξ₁ (Γ ⊦ ⟦?⟧ ⇝ p' : C) Ξ₂


Ξ Ω ⊦ Ξ₀ (Γ ⊦ p' ≔ Z : ℕ) Ξ₁ Ξ₂
----------------------------------------------
Ξ Ω ⊦ Ξ₀ (Γ ⊦ p' : ℕ) Ξ₁ (Γ ⊦ ⟦Z⟧ ⇝ p' : ℕ) Ξ₂


Ξ Ω ⊦ Ξ₀ (Γ ⊦ t' : ℕ) (Γ ⊦ ⟦t⟧ ⇝ t' : ℕ) (Γ ⊦ p' ≔ S t' : ℕ) Ξ₁ Ξ₂
------------------------------------------------------------------
Ξ Ω ⊦ Ξ₀ (Γ ⊦ p' : ℕ) Ξ₁ (Γ ⊦ ⟦S t⟧ ⇝ p' : ℕ) Ξ₂


Ξ Ω ⊦ Ξ₀ (Γ ⊦ T ~ C type) (Γ ⊦ p' ≔ t : C) Ξ₁ Ξ₂
------------------------------------------------------
Ξ Ω ⊦ Ξ₀ (Γ ⊦ p' : C) Ξ₁ (Γ ⊦ (t : T) ⟦·⟧ ⇝ p' : C) Ξ₂


Ξ Ω ⊦ Ξ₀ (Γ ⊦ p' : C) Ξ₁ (Γ ⊦ q' : A) (Γ ⊦ ⟦e⟧ ⇝ e' : A) (Γ ⊦ (f e' : B[e'/x]) ⟦ē⟧ ⇝ p' : C) Ξ₂
-----------------------------------------------------------------------------------------------
Ξ Ω ⊦ Ξ₀ (Γ ⊦ p' : C) Ξ₁ (Γ ⊦ (f : (x : A) → B) ⟦e ē⟧ ⇝ p' : C) Ξ₂

//A core tactic is a mapping between two signatures:
//Hence core tactics already exist in the codebase.
Ξ Ω ⊦ α : Σ₀ ⇒ Σ₁

//A surface tactic represents a core tactic.

Ξ Ω ⊦ ⟦α⟧ ⇝ α' : ε ⇒ (Γ ⊦ A)
---------------------------
Ξ Ω Γ ⊦ ⟦tac α⟧ ⇝ (α' ·).π₂ : A

Ξ Ω ⊦ ⟦α⟧ ⇝ α' : Σ₁ ⇒ Σ₂
Ξ Ω ⊦ ⟦β⟧ ⇝ β' : Σ₀ ⇒ Σ₁
---------------------------------------------
Ξ Ω ⊦ ⟦α ; β⟧ ⇝ (\x => α' (β' x)) : Σ₀ ⇒ Σ₂

Ξ Ω Γ ⊦ ⟦A | ρ⟧ = B
------------------------------------------------------
Ξ Ω ⊦ ⟦reduce ρ⟧ ⇝ (\x => x) : ε (Γ ⊦ B) ⇒ ε (Γ ⊦ A)

Ξ Ω Γ ⊦ ⟦t⟧ ⇝ t' : A
-----------------------------------------------
Ξ Ω ⊦ ⟦exact t⟧ ⇝ (\_ => ·, t') : ε ⇒ ε (Γ ⊦ A)

Ξ Σ Ω(↑Σ) Γ ⊦ A type
Ξ Σ Ω(↑Σ) Γ ⊦ ⟦t⟧ ⇝ t' : A
--------------------------------------------------------
Ξ Ω ⊦ ⟦let x ≔ t⟧ ⇝ ((σ, t) ⇒ σ) : Σ (Γ ⊦ x ≔ t : A) ⇒ Σ

Ξ Ω ⊦ ⟦α⟧ ⇝ α' : ε ⇒ Σ
Ξ Ω ⊦ ⟦β⟧ ⇝ β' : ε ⇒ (Γ(id, α' ·) ⊦ A(id, α' ·))
--------------------------------------------------------
Ξ Ω ⊦ ⟦* α * β⟧ ⇝ (\_ => α' , (β' ·).π₂) : ε ⇒ Σ (Γ ⊦ A)
