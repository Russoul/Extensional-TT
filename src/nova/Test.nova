syntax e{≥3} ⨯ e{≥2} : e{2}

syntax e{≥3} → e{≥2} : e{2}

syntax e{≥3} , e{≥2} : e{2}

syntax e{≥2} ≡ e{≥2} ∈ e{≥2} : e{1}

syntax e{≥2} ≡ e{≥2} type : e{1}

syntax e{≥4} + e{≥5} : e{4}

syntax e{≥4} @ e{≥5} : e{4}

syntax e{≥6} * e{≥7} : e{6}

syntax e{≥6} ∘ e{≥5} : e{5}

syntax e{≥10} ≅ e{≥10} : e{9}

syntax e{≥10} ++ e{≥10} : e{4}

let test0 : ℕ
          ≔ Z

let test1 : ℕ ⨯ ℕ ⨯ ℕ
          ≔ Z , S Z , S (S Z)

let test4 : (A : 𝕌) ⨯ A
          ≔ ℕ , Z

let test31 : Z ≡ ? ∈ ℕ
           ≔ Refl

let the : (A : 𝕌) → A → A
        ≔ A x ↦ x

let id : {A : 𝕌} → A → A
       ≔ {A} ↦ x ↦ x

define sym : {A : 𝕌} → {a₀ a₁ : A} → (a₀ ≡ a₁ ∈ A) → (a₁ ≡ a₀ ∈ A)
           ≔ {A a₀ a₁} ↦ a ↦ J ? ? (x. e. x ≡ a₀ ∈ A) Refl ? a

define fun-eta : (A : 𝕌) → (B : A → 𝕌) → (f : (x : A) → B x) → ((x ↦ f x) ≡ f ∈ ((x : A) → B x))
               ≔ A B f ↦ Π-η f

define fun-ext : {A : 𝕌} → {B : A → 𝕌} → {f g : (x : A) → B x} → (p : (x : A) → f x ≡ g x ∈ B x) → f ≡ g ∈ ((x : A) → B x)
               ≔ {A B f g} ↦ p ↦ J ? ? (α. h. α ≡ g ∈ ?) (J ? ? (α. h. ?(A , B , f , g , p) ≡ α ∈ ?) (Π⁼ (x. ?) (x. ?) (x. p x)) ? (Π-η ?)) ? (Π-η ?)

define happly' : (A : 𝕌) → (B : 𝕌) → (f : A → B) → (g : A → B) → (p : f ≡ g ∈ ?) → (x : A) → f x ≡ g x ∈ ?
               ≔ A B f g p ↦ x ↦ J ? ? (α.h. f x ≡ α x ∈ ?) Refl ? p

define happly : (A : 𝕌) → (B : A → 𝕌) → (f : (x : A) → B x) → (g : (x : A) → B x) → (p : f ≡ g ∈ ?) → (x : A) → f x ≡ g x ∈ ?
              ≔ A B f g p x ↦ J ? ? (α.h. f x ≡ α x ∈ ?) Refl ? p

define cong : {A B : 𝕌} → (f : A → B) → {a₀ a₁ : A} → (a : a₀ ≡ a₁ ∈ ?) → f a₀ ≡ f a₁ ∈ ?
            ≔ {A B} ↦ f ↦ {a₀ a₁} ↦ a ↦ J ? ? (x. h. f a₀ ≡ f x ∈ ?) Refl ? a

define transp : (A : 𝕌) → (B : A → 𝕌) → {a₀ a₁ : A} → (a : a₀ ≡ a₁ ∈ ?) → B a₀ → B a₁
              ≔ A B ↦ {a₀ a₁} ↦ a ↦ t ↦ J ? ? (α. h. B α) t ? a

define S-cong : {x y : ℕ} → (e : x ≡ y ∈ ?) → S x ≡ S y ∈ ?
              ≔ {x y} ↦ e ↦ J ? ? (z. h. S x ≡ S z ∈ ?) Refl ? e


let pred' : ℕ → ℕ
          ≔ x ↦ ℕ-elim (x. ℕ) Z (x.h. x) x

define pred'-S : (x : ℕ) → pred' (S x) ≡ x ∈ ℕ
               ≔ x ↦ tac
                   reduce ☐ _ _ ≡ _ ∈ _;
                   reduce ☐ ≡ _ ∈ _;
                   reduce ☐ ≡ _ ∈ _;
                   trivial;

define S-cong-inv-H0 : {x y : ℕ} → (e : pred' (S x) ≡ pred' (S y) ∈ ?) → x ≡ y ∈ ?
                     ≔ {x y} ↦ tac
                          rewrite⁻¹ ((x : ☐ ≡ _ ∈ _) → _) (pred'-S ?);
                          rewrite⁻¹ ((x : _ ≡ ☐ ∈ _) → _) (pred'-S ?);
                          exact id;

define S-cong-inv : {x y : ℕ} → (e : S x ≡ S y ∈ ?) → x ≡ y ∈ ?
                  ≔ {x y} ↦ e ↦ S-cong-inv-H0 (cong pred' e)

let Vect : ℕ → 𝕌 → 𝕌
         ≔ n A ↦ ℕ-elim (x. 𝕌) 𝟙 (x.H. A ⨯ H) n

let nil : {A : 𝕌} → Vect Z A
        ≔ {A} ↦ tac reduce ☐ _ _;
                    reduce ☐ _;
                    reduce ☐;
                    reduce ☐;
                    exact tt;

let Vect-Z : {A : 𝕌} → Vect Z A ≡ 𝟙 ∈ 𝕌
               ≔ {A} ↦ tac
                     reduce ☐ _ _ ≡ _ ∈ _;
                     reduce ☐ _ ≡ _ ∈ _;
                     reduce ☐ ≡ _ ∈ _;
                     reduce ☐ ≡ _ ∈ _;
                     trivial;

let Vect-S : {A : 𝕌} → {n : ℕ} → Vect (S n) A ≡ A ⨯ Vect n A ∈ 𝕌
               ≔ {A n} ↦ tac
                     reduce ☐ _ _ ≡ _ ∈ _;
                     reduce ☐ _ ≡ _ ∈ _;
                     reduce ☐ ≡ _ ∈ _;
                     reduce ☐ ≡ _ ∈ _;
                     reduce _ ≡ ((x : _) ⨯ ☐ _ _) ∈ _;
                     reduce _ ≡ ((x : _) ⨯ ☐ _) ∈ _;
                     reduce _ ≡ ((x : _) ⨯ ☐) ∈ _;
                     trivial;

define nil-unique : {A : 𝕌} → (xs : Vect Z A) → xs ≡ nil {A} ∈ Vect Z A
                  ≔
                   {A} ↦ tac
                      rewrite⁻¹ ((x : ☐) → _) Vect-Z;
                      rewrite⁻¹ ((x : _) → _ ≡ _ ∈ ☐) Vect-Z;
                      exact (xs ↦ 𝟙⁼ ? ?);


let cons : {A : 𝕌} → {n : ℕ} → A → Vect n A → Vect (S n) A
         ≔ {A n} ↦ x xs ↦ tac
             rewrite⁻¹ ☐ Vect-S;
             exact x , xs;

define prod-η : {A B : 𝕌} → (p : A ⨯ B) → (p .π₁ , p .π₂) ≡ p ∈ ?
              ≔ {A B} ↦ p ↦ Σ-η p


define Vect-elim-H : {A : 𝕌}
                   → (P : (n : ℕ) → Vect n A → 𝕌)
                   → (n : ℕ)
                   → (xs : A ⨯ Vect n A)
                   → P (S n) (cons (xs .π₁) (xs .π₂))
                   → P (S n) (tac rewrite⁻¹ ☐ Vect-S; exact (xs .π₁ , xs .π₂);)
                   ≔ {A} ↦ P n xs ↦ tac
                       reduce _ (☐ _ _ _ _) → _;
                       reduce _ (☐ _ _ _) → _;
                       reduce _ (☐ _ _) → _;
                       reduce _ (☐ _) → _;
                       reduce _ ☐ → _;
                       exact id;

let Vect-elim : {A : 𝕌}
              → {n : ℕ}
              → (P : (n : ℕ) → Vect n A → 𝕌)
              → (nil : P Z nil)
              → (cons : (n : ℕ) → (x : A) → (xs : Vect n A) → P n xs → P (S n) (cons x xs))
              → (xs : Vect n A)
              → P n xs
              ≔ {A n} ↦ P nil cons xs ↦ ℕ-elim (n. (xs : Vect n A) → P n xs)
                  (tac rewrite⁻¹ (_ → _ ☐) (nil-unique xs);
                       exact (xs ↦ nil);
                  )
                  -- (n : ℕ) (h : (xs : Vect n A) → P n xs) ⊦ s : (xs : A ⨯ Vect n A) → P (S n) (xs.π₁, xs.π₂)
                  -- xs.π₁ : A
                  -- xs.π₂ : Vect n A
                  -- h xs.π₂ : P n xs.π₂
                  -- cons n xs.π₁ xs.π₂ (h xs.π₂) : P (S n) (cons xs.π₁ xs.π₂)
                  (n. h. tac
                    rewrite⁻¹ (☐ → _) Vect-S;
                    rewrite (_ → _ ☐) (Σ-η xs);
                    exact (xs ↦ Vect-elim-H P n xs (cons n (xs .π₁) (xs .π₂) (h (xs .π₂))));
                  )
                  n xs

define Vect-elim-nil : {A : 𝕌}
                     → (P : (n : ℕ) → Vect n A → 𝕌)
                     → (onNil : P Z nil)
                     → (onCons : (n : ℕ) → (x : A) → (xs : Vect n A) → P n xs → P (S n) (cons x xs))
                     → Vect-elim P onNil onCons nil ≡ onNil ∈ ?
                     ≔ {A} ↦ P onNil onCons ↦ tac
                          reduce ☐ _ _ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ ≡ _ ∈ _;
                          reduce ☐ _ ≡ _ ∈ _;
                          reduce ☐ ≡ _ ∈ _;
                          reduce ☐ _ ≡ _ ∈ _;
                          reduce ☐ ≡ _ ∈ _;
                          trivial;

define Vect-elim-cons : {A : 𝕌}
                      → {n : ℕ}
                      → (P : (n : ℕ) → Vect n A → 𝕌)
                      → (onNil : P Z nil)
                      → (onCons : (n : ℕ) → (x : A) → (xs : Vect n A) → P n xs → P (S n) (cons x xs))
                      → (x : A)
                      → (xs : Vect n A)
                      → Vect-elim P onNil onCons (cons x xs) ≡ onCons n x xs (Vect-elim P onNil onCons xs) ∈ ?
                      ≔ {A n} ↦ P onNil onCons x xs ↦ tac
                          reduce ☐ _ _ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ ≡ _ ∈ _;
                          reduce ☐ _ ≡ _ ∈ _;
                          reduce ☐ ≡ _ ∈ _;
                          reduce ☐ _ ≡ _ ∈ _;
                          reduce ☐ ≡ _ ∈ _;
                          reduce ☐ _ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ _ ≡ _ ∈ _;
                          reduce ☐ _ _ ≡ _ ∈ _;
                          reduce ☐ _ ≡ _ ∈ _;
                          reduce ☐ _ _ ≡ _ ∈ _;
                          reduce ☐ _ ≡ _ ∈ _;
                          reduce ☐ ≡ _ ∈ _;
                          reduce _ _ (☐ _ _ _ _ .π₁) _ _ ≡ _ ∈ _;
                          reduce _ _ (☐ _ _ _ .π₁) _ _ ≡ _ ∈ _;
                          reduce _ _ (☐ _ _ .π₁) _ _ ≡ _ ∈ _;
                          reduce _ _ (☐ _ .π₁) _ _ ≡ _ ∈ _;
                          reduce _ _ (☐ .π₁) _ _ ≡ _ ∈ _;
                          reduce _ _ ☐ _ _ ≡ _ ∈ _;
                          reduce _ _ _ (☐ _ _ _ _ .π₂) _ ≡ _ ∈ _;
                          reduce _ _ _ (☐ _ _ _ .π₂) _ ≡ _ ∈ _;
                          reduce _ _ _ (☐ _ _ .π₂) _ ≡ _ ∈ _;
                          reduce _ _ _ (☐ _ .π₂) _ ≡ _ ∈ _;
                          reduce _ _ _ (☐ .π₂) _ ≡ _ ∈ _;
                          reduce _ _ _ ☐ _ ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _ _ _) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _ _) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐) _ _) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ _ _ (☐ _ _ _ _ .π₂)) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ _ _ (☐ _ _ _ .π₂)) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ _ _ (☐ _ _ .π₂)) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ _ _ (☐ _ .π₂)) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ _ _ (☐ .π₂)) ≡ _ ∈ _;
                          reduce _ _ _ _ (ℕ-elim _ _ _ _ ☐) ≡ _ ∈ _;
                          reduce _ ≡ _ _ _ _ (☐ _ _ _ _ _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (☐ _ _ _ _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (☐ _ _ _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (☐ _ _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (☐ _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (☐ _) ∈ _;
                          reduce _ ≡ _ _ _ _ ☐ ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _ _ _) _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _ _) _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _) _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _) _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _ _) _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐ _) _ _) ∈ _;
                          reduce _ ≡ _ _ _ _ (ℕ-elim _ _ (xs ↦ ☐) _ _) ∈ _;
                          trivial;


-- 0   + y = y
-- S x + y = S (x + y)
let _+_ : ℕ → ℕ → ℕ
        ≔ x y ↦ ℕ-elim (z. ℕ) y (x. h. S h) x

let testy : ℕ → ℕ → ℕ
          ≔ x y ↦ Z

define bug : (x y ↦ Z) ≡ testy ∈ ℕ → ℕ → ℕ
           ≔ sym ?hello

define plus-left-Z : (x : ℕ) → Z + x ≡ x ∈ ℕ
                   ≔ x ↦ J (ℕ → ℕ → ℕ) ?
                           (α. h. α Z x ≡ x ∈ ℕ)
                           (J (ℕ → ℕ) ?
                              (α. h. α x ≡ x ∈ ℕ)
                              (J ℕ ?
                                 (α. h. α ≡ x ∈ ℕ)
                                 (J ? ? (α. h. α ≡ x ∈ ℕ) Refl ? (sym (ℕ-β-Z (x. ℕ) ? (x.h. S h))))
                                 ?
                                 (sym (Π-β ? (x. ?) (y. ℕ-elim (x. ℕ) y (x. h. S h) Z) ?))
                              )
                              ?
                              (sym {ℕ → ℕ} (Π-β ? (x. ?) (x. y ↦ ℕ-elim (z. ℕ) y (x. h. S h) x) Z))
                           )
                           ?
                           (sym !_+_)

{-
define plus-left-S : (t : ℕ) → (x : ℕ) → (S t + x) ≡ S (t + x) ∈ ℕ
                   ≔ t ↦ x ↦ J ? ?
                               (_@_. h. S t @ x ≡ S (t + x) ∈ ℕ)
                               (J ? ?
                                  (α. h. α x ≡ S (t + x) ∈ ℕ)
                                  (J ? ?
                                     (α. h. α ≡ S (t + x) ∈ ℕ)
                                     (J ? ?
                                        (α. h. α ≡ S (t + x) ∈ ℕ)
                                        (S-cong (J ? ?
                                                   (α. h. α ≡ t + x ∈ ℕ)
                                                   (J ? ?
                                                      (α. h. α x ≡ t + x ∈ ℕ)
                                                      (J ? ? (α. h. α t x ≡ t + x ∈ ℕ) Refl ? !_+_)
                                                      ?
                                                      (Π-β ℕ (x. ℕ → ℕ) (x. y ↦ ℕ-elim (z. ℕ) y (x.h. S h) x) t)
                                                   )
                                                   ?
                                                   (Π-β ? (x. ?) (y. ℕ-elim (z. ℕ) y (x.h. S h) t) x)
                                                ))
                                        ?
                                        (sym (ℕ-β-S (z. ℕ) x (x.h. S h) t))
                                     )
                                     ?
                                     (sym (Π-β ? (x. ?) (y.  ℕ-elim (z. ℕ) y (x.h. S h) (S t)) x))
                                  )
                                  ?
                                  (sym (Π-β ? (x. ?) (x. y ↦ ℕ-elim (z. ℕ) y (x.h. S h) x) (S t)))
                               )
                               ?
                               (sym !_+_)

define plus-right-Z : (x : ℕ) → x + Z ≡ x ∈ ℕ
                    ≔ x ↦ ℕ-elim (x. x + Z ≡ x ∈ ℕ)
                                 (J ? ? (α. h. α ≡ Z ∈ ℕ) Refl ? (sym (plus-left-Z Z)))
                                 (x. h. J ? ? (α. h. α ≡ S x ∈ ℕ) (S-cong h) ? (sym (plus-left-S x Z)))
                                 x

-- (x y : ℕ) (h : x + S y ≡ S (x + y) ∈ ℕ) ⊦ S x + S y ≡ S (S x + y)
--                                           S (x + S y) ≡ S (S x + y)
--                                           x + S y ≡ S x + y
--                                           x + S y ≡ S (x + y)
define plus-right-S : (x y : ℕ) → (x + S y) ≡ S (x + y) ∈ ℕ
                    ≔ x y ↦ ℕ-elim (x. (x + S y) ≡ S (x + y) ∈ ℕ)
                                   (tac rewrite⁻¹ (☐ ≡ _ ∈ _) (plus-left-Z (S y));
                                        exact (S-cong (tac rewrite⁻¹ (_ ≡ ☐ ∈ _) (plus-left-Z y); trivial;));
                                   )
                                   (x. h. tac rewrite⁻¹ (☐ ≡ _ ∈ _) (plus-left-S ? ?);
                                              exact S-cong (tac rewrite⁻¹ (_ ≡ ☐ ∈ _) (plus-left-S ? ?); exact h;);
                                   )
                                   x


define plus-commut : (x y : ℕ) → x + y ≡ y + x ∈ ℕ
                   ≔ x y ↦
                      ℕ-elim (x. (y : ℕ) → x + y ≡ y + x ∈ ℕ)
                             (y ↦ tac
                                rewrite⁻¹ (☐ ≡ _ ∈ _) (plus-left-Z ?);
                                rewrite⁻¹ (_ ≡ ☐ ∈ _) (plus-right-Z ?);
                                trivial;
                             )
                             (x. h. y ↦ tac
                               rewrite⁻¹ (☐ ≡ _ ∈ _) (plus-left-S ? ?);
                               rewrite⁻¹ (_ ≡ ☐ ∈ _) (plus-right-S ? ?);
                               exact (S-cong (h ?));
                             )
                             x y

-- 0 * y = 0
-- (1 + x) * y = y + x * y
let _*_ : ℕ → ℕ → ℕ
        ≔ x y ↦ ℕ-elim (x. ℕ) Z (x. h. y + h) x


define mult-left-Z : (x : ℕ) → Z * x ≡ Z ∈ ?
                    ≔ x ↦ tac
                        reduce ☐ _ _ ≡ _ ∈ _;
                        reduce ☐ _ ≡ _ ∈ _;
                        reduce ☐ ≡ _ ∈ _;
                        reduce ☐ ≡ _ ∈ _;
                        trivial;

define mult-right-Z : (x : ℕ) → x * Z ≡ Z ∈ ?
                    ≔ x ↦ tac
                        reduce ☐ _ _ ≡ _ ∈ _;
                        reduce ☐ _ ≡ _ ∈ _;
                        reduce ☐ ≡ _ ∈ _;
                        rewrite⁻¹ (ℕ-elim _ _ ☐ _ ≡ _ ∈ _) (plus-left-Z ?);
                        exact ℕ-elim (x. ℕ-elim (x. ℕ) Z (x.h. h) x ≡ Z ∈ ℕ) (tac reduce ☐ ≡ _ ∈ _; trivial;) (x. h. tac reduce ☐ ≡ _ ∈ _; exact h;) x;


define mult-left-S : (t : ℕ) → (x : ℕ) → (S t * x) ≡ (x + t * x) ∈ ?
                   ≔ t x ↦ tac
                       reduce ☐ _ _ ≡ _ ∈ _;
                       reduce ☐ _ ≡ _ ∈ _;
                       reduce ☐ ≡ _ ∈ _;
                       reduce ☐ ≡ _ ∈ _;
                       reduce _ ≡ _ + ☐ _ _ ∈ _;
                       reduce _ ≡ _ + ☐ _ ∈ _;
                       reduce _ ≡ _ + ☐ ∈ _;
                       trivial;

define Nat-eta : (A : ℕ → 𝕌)
               → (f : (x : ℕ) → A x)
               → (z : A Z)
               → (s : (x : ℕ) → A x → A (S x))
               → (f Z ≡ z ∈ ?)
               → ((x : ℕ) → f (S x) ≡ s x (f x) ∈ ?)
               → (f ≡ (x ↦ ℕ-elim (x. A x) z (x. h. s x h) x) ∈ ?)
               ≔ A f z s c0 c1 ↦ fun-ext (x ↦ tac reduce _ ≡ ☐ ∈ _;
                                                  exact ℕ-elim
                                                          (x. f x ≡ ℕ-elim (x. A x) z (x.h. s x h) x ∈ A x)
                                                          (tac reduce _ ≡ ☐ ∈ _; exact c0;)
                                                          (x. h. tac reduce _ ≡ ☐ ∈ _; rewrite (_ ≡ _ ☐ ∈ _) h; exact c1 x;)
                                                          x;
                                         )


define trans : {A : 𝕌}
             → {x y z : A}
             → (x ≡ y ∈ A)
             → (y ≡ z ∈ A)
             → (x ≡ z ∈ A)
             ≔ {A x y z} ↦ p q ↦
                 tac rewrite (_ ≡ ☐ ∈ _) q;
                     rewrite (_ ≡ ☐ ∈ _) p;
                     trivial;

-- x + y ≡ x + z → y ≡ z
define ℕ-left-cancel : (x y z : ℕ) → (x + y ≡ x + z ∈ ℕ) → (y ≡ z ∈ ℕ)
                     ≔ x y z p ↦ ℕ-elim (x. (x + y ≡ x + z ∈ ℕ) → (y ≡ z ∈ ℕ))
                     -- (x : ℕ) (y : ℕ) (z : ℕ) (p : _+_(·) x y ≡ _+_(·) x z ∈ ℕ)  ⊦ z : (_+_(·) 0 y ≡ _+_(·) 0 z ∈ ℕ) → (y ≡ z ∈ ℕ) (NoSolve)
                       (tac rewrite⁻¹ ((x : ☐ ≡ _ ∈ _) → _) (plus-left-Z ?);
                            rewrite⁻¹ ((x : _ ≡ ☐ ∈ _) → _) (plus-left-Z ?);
                            exact id;)
                     -- (x : ℕ) (y : ℕ) (z : ℕ) (p : _+_(·) x y ≡ _+_(·) x z ∈ ℕ) (x : ℕ) (h : (x + y ≡ x + z ∈ ℕ) → (y ≡ z ∈ ℕ))  ⊦
                     -- s : (S (x + y) ≡ S (x + z) ∈ ℕ) → (y ≡ z ∈ ℕ) (NoSolve)
                       (x.h. tac rewrite⁻¹ ((x : ☐ ≡ _ ∈ _) → _) (plus-left-S ? ?);
                                 rewrite⁻¹ ((x : _ ≡ ☐ ∈ _) → _) (plus-left-S ? ?);
                                 exact (t ↦ h (S-cong-inv t));
                       )
                       x p

let _++_ : {A : 𝕌} → {m n : ℕ} → Vect m A → Vect n A → Vect (m + n) A
         ≔ {A m n} ↦ xs ys ↦ ?abc



let _∘_ : {A B C : 𝕌} → (B → C) → (A → B) → (A → C)
        ≔ {A B C} ↦ g f x ↦ g (f x)

let _≅_ : 𝕌 → 𝕌 → 𝕌
        ≔ A B ↦ (f : A → B) ⨯ (g : B → A) ⨯ (g ∘ f ≡ id ∈ ?) ⨯ (f ∘ g ≡ id ∈ ?) -}
